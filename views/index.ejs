<!doctype html>
<head>
  <meta charset="utf-8">

  <title>Eventi a Ferrara</title>
  <meta name="description" content="Event Finder">
  <meta name="viewport" content="width=device-width">
  <link rel="stylesheet" href="css/reset.css">
  <link rel="stylesheet" href="css/styles.css">
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
  <script type="text/javascript" src="//www.parsecdn.com/js/parse-1.2.7.min.js"></script>
  <script type="text/javascript" src="//raw.github.com/timrwood/moment/2.0.0/min/moment.min.js"></script>
</head>

<body>
<div id="fb-root"></div>
<script>
	Parse.initialize("uB7oZlwqkTF3eqebbh9rsL15upvDsKyfKa7O8Bmn", "3f0zSS9G5GRrICBYHRbkeb8ee8k9mSBu6t59NyBi");
	window.fbAsyncInit = function() {
		//retrieveEvents().then(function(results) {printResults(results)});
		
		Parse.FacebookUtils.init({
			appId      : <%= process.env.FACEBOOK_APP_ID %>, // Facebook App ID
			cookie     : true, // enable cookies to allow Parse to access the session
			xfbml      : true  // parse XFBML
		});

		FB.Event.subscribe('auth.authResponseChange', function(response) {
			// Here we specify what we do with the response anytime this event occurs. 
			if (response.status === 'connected') {
				handleLogin();
			} else if (response.status === 'not_authorized') {
				login();
			} else {
				login();
			}
		});
	};

	// Load the SDK asynchronously
	(function(d){
	var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
	if (d.getElementById(id)) {return;}
	js = d.createElement('script'); js.id = id; js.async = true;
	js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=" + <%= process.env.FACEBOOK_APP_ID %>;
	ref.parentNode.insertBefore(js, ref);
	}(document));
	
	function handleLogin() {
		FB.getLoginStatus().then(function(response) {
			if (response.status === 'connected') {
				var uid = response.authResponse.userID;
				var accessToken = response.authResponse.accessToken;
				fetchUserInfo(uid).then(updateIfNeeded(userInfo, uid, accessToken));
			}
		});
	}
	
	function fetchUserInfo(uid) {
		var FacebookUser = Parse.Object.extend("FacebookUser");
		var query = new Parse.Query(FacebookUser);
		query.equal("uid", uid);
		return query.first();
	}
	
	function updateIfNeeded(userInfo, uid, accessToken) {
		var beforeThisItsTooOld = moment().add('days', -1);
		if(userInfo == undefined) {
			var FacebookUser = Parse.Object.extend("FacebookUser");
			userInfo = new FacebookUser();
			userInfo.set("uid", uid);
		}
		if((userInfo.last_update == undefined)|| (userInfo.last_update < beforeThisItsTooOld)) {
			$.get("/doAnUpdate", {uid: uid, token : accessToken}).then(function() {
				userInfo.set("last_update", new Date());
				userInfo.set("token", accessToken);
				userInfo.save();
			});
		}
	}
	
	function printResults(results) {
		if (!document.getElementsByTagName) return;
		if((results == undefined) || (results.length == 0)) {			
			dataDiv = document.getElementById("data-div");
			infoDiv=document.createElement("DIV");
			textnode = document.createTextNode("Nessun evento disponibile");					 
			infoDiv.appendChild(textnode);		
			dataDiv.appendChild(infoDiv);
		} else {
			results.forEach(function(entry) {				 	
				 $("#event-table").removeClass("notVisible");
				 tabBody=document.getElementById("data-div").getElementsByTagName("TBODY").item(0);
				 row=document.createElement("TR");
				 
				 addToRow(row, entry.get("name"));
				 var attending = entry.get("attending_count") + "+" + (entry.get("unsure_count") !== undefined ? entry.get("unsure_count") : 0);
				 addToRow(row, attending);
				 addToRow(row, parseDate(entry.get("start_time")));
				 addToRow(row, entry.get("location_description"));
				 
				 tabBody.appendChild(row);
			});
		}
	}

	function addToRow(row, content) {
		cell = document.createElement("TD");					 
		textnode = document.createTextNode(content);					 
		cell.appendChild(textnode);					 
		row.appendChild(cell);
	}
  
	function retrieveEvents() {    				
		// User's location
		var userGeoPoint = new Parse.GeoPoint({latitude: 44.839317, longitude: 11.619759});
		var FacebookEvent = Parse.Object.extend("FacebookEvent");
		var query = new Parse.Query(FacebookEvent);
		query.near("location_coordinates", userGeoPoint);
		query.limit(20);
		query.greaterThan("start_time", new Date());
		query.descending("attending_count");
		query.ascending("start_time");
		// Final list of objects
		return query.find();
	}
	
	function getTodayPlusDays(numberOfDays) {
		var theDate = new Date();
		theDate.setDate(theDate.getDate() + numberOfDays);
		return theDate;
	}
  
	function updateEvents() {
		var endTime = moment().add('days', 7).format('DD-MM-YYYY');
		FB.api("/fql?q=" + escape("SELECT eid, start_time FROM event WHERE privacy='OPEN' AND start_time > now() AND eid IN (SELECT eid FROM event_member WHERE start_time > now() AND (uid IN(SELECT uid2 FROM friend WHERE uid1=me()) OR uid=me())ORDER BY start_time ASC LIMIT 50) ORDER BY start_time ASC "), function(response) {	 
				var theEvents = response.data;
				var FacebookEvent = Parse.Object.extend("FacebookEvent");
				var objects = [];
				theEvents.forEach(function(entry) {
					temp = new FacebookEvent();
					temp.set("start_time", new Date(entry.start_time));
					temp.set("eid", entry.eid);
					objects.push(temp); 
				});
				Parse.Object.saveAll(objects);

		});
	}
	
	/*
	function cloudUpdate() {
	var auth = FB.getAuthResponse();
	
	Parse.Cloud.run('getIp', { token: auth.accessToken }, {
	  success: function(result) {
		console.log(result);
	  },
	  error: function(error) {
		console.log(error);
	  }
	});
	}*/
	
	function saveEvent(entry, facebookLocation) {
		getEvent(entry.eid).then(function(currentEvent) {
			start = entry.start_time;
			end = entry.end_time;
			currentEvent.set("start_time", new Date(start));
			currentEvent.set("end_time", new Date(end));
			currentEvent.set("attending_count", entry.attending_count);
			currentEvent.set("unsure_count", entry.unsure_count);
			currentEvent.set("name", entry.name);
			currentEvent.set("location_object", facebookLocation);
			currentEvent.set("location_coordinates", facebookLocation.get("location"));
			currentEvent.set("location_description", entry.location);
			currentEvent.save();
		});
	}
	
	function getEvent(event_id) {
		var FacebookEvent = Parse.Object.extend("FacebookEvent");
		var query = new Parse.Query(FacebookEvent);
		query.equalTo("event_id", event_id);					
		var result = query.first().then(function(result) {
		  if(result !== undefined) {
			return result;
		  } else {
			var newEvent = new FacebookEvent();
			newEvent.set("event_id",event_id);
			return newEvent;
		  }
		});
		return result;
	}
	
	function getLocation(entry) {
		var FacebookLocation = Parse.Object.extend("FacebookLocation");
		//console.log(location_id);
		var query = new Parse.Query(FacebookLocation);
		query.equalTo("page_id", entry.page_id);					
		var result = query.first().then(function(result) {
			return result;
		});
		return result;
	}

  function login() {
        Parse.FacebookUtils.logIn("user_events,friends_events", {
		  success: function(user) {
			if (!user.existed()) {
			  alert("User signed up and logged in through Facebook!");
			} else {
			  alert("User logged in through Facebook!");
			}
		  },
		  error: function(user, error) {
			alert("User cancelled the Facebook login or did not fully authorize.");
		  }
		});
	}
</script>
<!--Below we include the Login Button social plugin. This button uses the JavaScript SDK to-->
<fb:login-button show-faces="true" scope="user_events, friends_events" width="200" max-rows="1"></fb:login-button>
<!--present a graphical Login button that triggers the FB.login() function when clicked.-->
<div id="data-div">
	<table id="event-table" class="notVisible">
		<thead>
			<tr>
				<th>Evento</th><th>Partecipanti+Indecisi</th><th>Inizio</th><th>Luogo</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
</div>
</body>
</html>