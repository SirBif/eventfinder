{
  "name": "any-db",
  "version": "0.5.0",
  "description": "Database-agnostic connection pooling, querying, and result sets",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db.git"
  },
  "author": {
    "name": "Stephen Sugden"
  },
  "keywords": [
    "mysql",
    "postgres",
    "pg",
    "sqlite",
    "sqlite3"
  ],
  "license": "BSD",
  "dependencies": {
    "any-db-pool": ">= 0.0.6"
  },
  "devDependencies": {
    "sqlite3": "*",
    "pg": "*",
    "mysql": "*",
    "tap": "*"
  },
  "readme": "# any-db - a less-opinionated database abstraction layer.\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db)\n\n**Heads up!** - v0.5.0 changed the behaviour of 'query' events emitted by the\nconnection pool and transaction objects. Whereas this would previously emit the\nSQL statement and an array of parameters, it now emits a single [Query\nobject][query]. The query object is emitted *after* the query has been submitted\nto the backend so treat it as *read-only*.\n\n[query]: https://github.com/grncdr/node-any-db/blob/master/API.md\n\n## Synopsis\n\n(There's also detailed [API][API] documentation available)\n\n    var anyDB = require('any-db')\n    var dbURL = 'driver://user:pass@hostname/database'\n    \nEstablish a connection:\n\n    var conn = anyDB.createConnection(dbURL)  // Takes an optional callback\n    \nMake queries:\n\n    var sql = 'SELECT * FROM my_table'\n    conn.query(sql).on('row', function (row) {})  // evented\n    conn.query(sql, function (error, result) {})  // or callback\n    \nUse bound parameters:\n\n    sql += ' WHERE my_column = ?'\n    conn.query(sql, [42]).on('row', ...)           // again, evented\n    conn.query(sql, [42], function (err, res) {})  // or callback\n\nClose a connection:\n\n    conn.end()\n    \nStart a transaction:\n\n    var tx = conn.begin()             // Can also take a callback\n    tx.on('error', function (err) {}) // Emitted for unhandled query errors\n    tx.query(...)                     // same interface as connections, plus...\n    tx.commit()                       // takes an optional callback for errors\n    tx.rollback()                     // this too\n    \nCreate a connection pool that maintains 2-20 connections\n\n    var pool = anyDB.createPool(dbURL, {min: 2, max: 20})\n    \n    pool.query(...)       // perform a single query, same API as connection\n    var tx = pool.begin() // start a transaction, again, same API as connection\n    pool.close()          // close the pool (call when your app should exit)\n\n## Description\n\nThe purpose of this library is to provide a consistent API for the commonly used\nfunctionality of SQL database drivers, while avoiding altering driver behaviour\nas much as possible.\n\nThe long-term goal of this project is to serve as the testing ground for finding\na suitable common interface, then (hopefully) convincing driver implementors to\nsupport it natively. In short, any-db hopes to prove it's usefulness well enough\nthat most of it can be obviated by the drivers themselves.\n\n### Things it does\n\n * Supports MySQL, Postgres, and SQLite3 as equally as possible. (More driver\n\t support is very much welcomed!)\n * Parses connection parameters from URLs: `driver://user:pass@host/database`\n * Streams results or gets them all at once, using an [api][query] almost\n\t identical to the existing interfaces of the MySQL and Postgres drivers.\n * A simple, solid, [connection pool][pool] with the ability to execute queries\n\t directly on a pool for auto-release behaviour. E.g. - this will never leak\n\t connections: `pool.query(\"SELECT 1\", function (err, results) { ... })`\n * Stateful [transaction objects][tx] for managing database transactions.\n\n### Things it might do (feedback needed!)\n\n * Provide a common result set API.\n\n### Things it will never do\n\n * Add it's own query helper methods like `.first` or `.fetchAll`\n * Include any sort of SQL string building. You might want to try my other library\n\t [gesundheit](https://github.com/BetSmartMedia/gesundheit), or one of the many\n\t [alternatives](https://encrypted.google.com/search?q=sql&q=site:npmjs.org&hl=en)\n\t for that. _(send me pull requests to list your libs here)_\n\n## Install\n\n    npm install --save any-db\n    npm install --save {pg,mysql,sqlite3}\n\n## Contributing\n\nFor ideas that would change an existing API or behaviour please open an issue to\npropose the change before spending time on implementing it. I know it's hard (I\ncode-first-ask-questions-later *way* too frequently :smile:) but I'd really hate\nfor anybody to put their time into something that won't be merged.\n\nI'm not terribly picky about code-formatting, but please try and keep lines\nunder 80 characters long if you can help it.\n\n\n## License\n\nMIT\n\n[API]: https://github.com/grncdr/node-any-db/blob/master/API.md\n[query]: https://github.com/grncdr/node-any-db/blob/master/API.md#query\n[pool]: https://github.com/grncdr/node-any-db/blob/master/API.md#exportscreatepool\n[tx]: https://github.com/grncdr/node-any-db/blob/master/API.md#transaction\n",
  "readmeFilename": "README.md",
  "_id": "any-db@0.5.0",
  "_from": "any-db@0.5.0"
}
